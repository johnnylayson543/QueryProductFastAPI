import unittest, requests
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

class ApiTestCase(unittest.TestCase):

    def test_get_single_product(self):
        print('Testing Get Single Product')
        url = 'http://localhost:8000/getSingleProduct' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)


class ApiTestCase2(unittest.TestCase):
    
    def test_get_all(self):
        print('Testing Get All')
        url = 'http://localhost:8000/getAll' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)

class ApiTestCase3(unittest.TestCase):
    
    def test_add_new(self):
        print('Testing Add New')
        url = 'http://localhost:8000/addNew' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)

class ApiTestCase4(unittest.TestCase):
    def test_delete_one(self):
        print('Testing Delete One')
        url = 'http://localhost:8000/deleteOne' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)

class ApiTestCase5(unittest.TestCase):
    def test_starts_with(self):
        print('Testing Starts With')
        url = 'http://localhost:8000/startsWith/{letter}' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)

class ApiTestCase6(unittest.TestCase):
    def test_paginate(self):
        print('Testing Paginate')
        url = 'http://localhost:8000/paginate' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)

class ApiTestCase7(unittest.TestCase):
    def test_convert(self):
        print('Testing Convert')
        url = 'http://localhost:8000/convert' # this is the endpoint to call
        # Making a GET request to the /sample endpoint
        response = requests.get(url)

        # Assert the response status code is 200
        self.assertEqual(response.status_code, 200)

# Function to generate the PDF report
def generate_pdf(test_results, output_file="test_report.pdf"):
    c = canvas.Canvas(output_file, pagesize=letter)
    width, height = letter
    
    c.setFont("Helvetica", 12)
    c.drawString(30, height - 30, "Unit Test Report")

    # Add test case results to the PDF
    y_position = height - 60
    for result in test_results:
        c.drawString(30, y_position, f"Test: {result['name']} - Result: {result['result']}")
        y_position -= 20

    # Add a footer
    c.drawString(30, 30, "Generated by: Test Automation")

    # Save the PDF
    c.save()

# Run the test cases and generate PDF after completion
def run_tests_and_generate_pdf():
    # Run the unit tests and get the results
    result = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase))
    result2 = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase2))
    result3 = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase3))
    result4 = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase4))
    result5 = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase5))
    result6 = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase6))
    result7 = unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(ApiTestCase7))

    # Prepare the test results for the PDF
    test_results = []
    
    if result.wasSuccessful():
        test_results.append({"name": "ApiTestCase - test_get_single_product", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase - test_get_single_product", "result": "Failed"})

    if result2.wasSuccessful():
        test_results.append({"name": "ApiTestCase2 - test_get_all", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase2 - test_get_all", "result": "Failed"})

    if result3.wasSuccessful():
        test_results.append({"name": "ApiTestCase3 - test_add_new", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase3 - test_add_new", "result": "Failed"})

    if result4.wasSuccessful():
        test_results.append({"name": "ApiTestCase4 - test_get_delete_one", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase4 - test_get_delete_one", "result": "Failed"})


    if result5.wasSuccessful():
        test_results.append({"name": "ApiTestCase5 - test_get_starts_with", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase5 - test_get_starts_with", "result": "Failed"})


    if result6.wasSuccessful():
        test_results.append({"name": "ApiTestCase6 - test_get_paginate", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase6 - test_get_paginate", "result": "Failed"})


    if result7.wasSuccessful():
        test_results.append({"name": "ApiTestCase7 - test_get_convert", "result": "Passed"})
    else:
        test_results.append({"name": "ApiTestCase7 - test_get_convert", "result": "Failed"})

    # Generate the PDF report
    generate_pdf(test_results)
    print("PDF report generated successfully.")


if __name__ == '__main__':
    run_tests_and_generate_pdf()


